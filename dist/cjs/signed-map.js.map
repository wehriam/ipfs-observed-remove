{"version":3,"sources":["../../src/signed-map.js"],"names":["notSubscribedRegex","IpfsSignedObservedRemoveMap","SignedObservedRemoveMap","constructor","ipfs","topic","entries","options","Error","chunkPubSub","abortController","AbortController","active","disableSync","boundHandleQueueMessage","handleQueueMessage","bind","boundHandleHashMessage","handleHashMessage","readyPromise","initIpfs","remoteHashQueue","syncCache","LruCache","peersCache","max","maxAge","hasNewPeers","on","ipfsHash","isLoadingHashes","debouncedIpfsSync","ipfsSync","serializeTransform","SerializeTransform","autoDestroy","maxChunkSize","messageSlice","pubsub","publish","signal","error","type","emit","deserializeTransform","DeserializeTransform","timeout","message","queue","JSON","parse","toString","process","hashLoadQueue","PQueue","id","ipfsId","Buffer","from","stringify","write","promises","subscribe","discover","push","waitForPeersThenSendHash","Promise","all","peerIds","peers","length","resolve","setTimeout","setImmediate","code","name","hash","getIpfsHash","has","set","dump","flush","insertQueue","deleteQueue","sort","x","y","data","file","add","wrapWithDirectory","recursive","pin","cid","ipfsPeerCount","shutdown","unsubscribeAbortController","abort","unsubscribe","clearTimeout","test","remoteHash","loadIpfsHash","stream","Readable","cat","CID","parser","streamArray","pipeline","pipe","arrayDepth","streamState","insertions","deletions","value","i","d","reject"],"mappings":"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","sourcesContent":["// @flow\n\nimport { SignedObservedRemoveMap } from 'observed-remove';\nimport { parser as jsonStreamParser } from 'stream-json/Parser';\nimport CID from 'cids';\n\nimport { streamArray as jsonStreamArray } from 'stream-json/streamers/StreamArray';\nimport LruCache from 'lru-cache';\nimport PQueue from 'p-queue';\nimport debounce from 'lodash/debounce';\nimport { Readable } from 'stream';\nimport {\n  SerializeTransform,\n  DeserializeTransform,\n} from '@bunchtogether/chunked-stream-transformers';\n\ntype Options = {\n  maxAge?:number,\n  bufferPublishing?:number,\n  key?: any,\n  format?: string,\n  disableSync?: boolean,\n  chunkPubSub?: boolean\n};\n\nconst notSubscribedRegex = /Not subscribed/;\n\nexport default class IpfsSignedObservedRemoveMap<K, V> extends SignedObservedRemoveMap<K, V> { // eslint-disable-line no-unused-vars\n  /**\n   * Create an observed-remove CRDT.\n   * @param {Object} [ipfs] Object implementing the [core IPFS API](https://github.com/ipfs/interface-ipfs-core#api), most likely a [js-ipfs](https://github.com/ipfs/js-ipfs) or [ipfs-http-client](https://github.com/ipfs/js-ipfs-http-client) object.\n   * @param {String} [topic] IPFS pubub topic to use in synchronizing the CRDT.\n   * @param {Iterable<V>} [entries=[]] Iterable of initial values\n   * @param {Object} [options={}]\n   * @param {String} [options.maxAge=5000] Max age of insertion/deletion identifiers\n   * @param {String} [options.bufferPublishing=20] Interval by which to buffer 'publish' events\n   */\n  constructor(ipfs:Object, topic:string, entries?: Iterable<[K, V, string, string]>, options?:Options = {}) {\n    super(entries, options);\n    if (!ipfs) {\n      throw new Error(\"Missing required argument 'ipfs'\");\n    }\n    this.chunkPubSub = !!options.chunkPubSub;\n    this.ipfs = ipfs;\n    this.abortController = new AbortController();\n    this.topic = topic;\n    this.active = true;\n    this.disableSync = !!options.disableSync;\n    this.boundHandleQueueMessage = this.handleQueueMessage.bind(this);\n    this.boundHandleHashMessage = this.handleHashMessage.bind(this);\n    this.readyPromise = this.initIpfs();\n    this.remoteHashQueue = [];\n\n    this.syncCache = new LruCache(100);\n    this.peersCache = new LruCache({\n      max: 100,\n      maxAge: 1000 * 60,\n    });\n    this.hasNewPeers = false;\n    this.on('set', () => {\n      delete this.ipfsHash;\n    });\n    this.on('delete', () => {\n      delete this.ipfsHash;\n    });\n    this.isLoadingHashes = false;\n    this.debouncedIpfsSync = debounce(this.ipfsSync.bind(this), 1000);\n    this.serializeTransform = new SerializeTransform({\n      autoDestroy: false,\n      maxChunkSize: 1024 * 512,\n    });\n    this.serializeTransform.on('data', async (messageSlice) => {\n      try {\n        await this.ipfs.pubsub.publish(this.topic, messageSlice, { signal: this.abortController.signal });\n      } catch (error) {\n        if (error.type !== 'aborted') {\n          this.emit('error', error);\n        }\n      }\n    });\n    this.serializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform = new DeserializeTransform({\n      autoDestroy: false,\n      timeout: 10000,\n    });\n    this.deserializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform.on('data', (message) => {\n      try {\n        const queue = JSON.parse(message.toString('utf8'));\n        this.process(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    });\n    this.hashLoadQueue = new PQueue({});\n    this.hashLoadQueue.on('idle', () => {\n      if (this.hasNewPeers) {\n        this.debouncedIpfsSync();\n      }\n      this.emit('hashesloaded');\n    });\n  }\n\n  /**\n   * Resolves when IPFS topic subscriptions are confirmed.\n   *\n   * @name IpfsObservedRemoveSet#readyPromise\n   * @type {Promise<void>}\n   * @readonly\n   */\n\n  declare ipfs: Object;\n  declare topic: string;\n  declare readyPromise: Promise<void>;\n  declare active: boolean;\n  declare ipfsId: string;\n  declare disableSync: boolean;\n  declare boundHandleQueueMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare boundHandleHashMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare db: Object;\n  declare ipfsHash: string | void;\n  declare syncCache: LruCache;\n  declare peersCache: LruCache;\n  declare hasNewPeers: boolean;\n  declare remoteHashQueue: Array<string>;\n  declare isLoadingHashes: boolean;\n  declare debouncedIpfsSync: () => Promise<void>;\n  declare abortController: AbortController;\n  declare chunkPubSub: boolean;\n  declare serializeTransform: SerializeTransform;\n  declare deserializeTransform: DeserializeTransform;\n  declare hashLoadQueue: PQueue;\n\n  async initIpfs() {\n    try {\n      const { id } = await this.ipfs.id({ signal: this.abortController.signal });\n      this.ipfsId = id;\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        throw error;\n      }\n      return;\n    }\n    this.on('publish', async (queue) => {\n      if (!this.active) {\n        return;\n      }\n      if (this.chunkPubSub) {\n        const message = Buffer.from(JSON.stringify(queue));\n        this.serializeTransform.write(message);\n      } else {\n        try {\n          const message = Buffer.from(JSON.stringify(queue));\n          await this.ipfs.pubsub.publish(this.topic, message, { signal: this.abortController.signal });\n        } catch (error) {\n          if (error.type !== 'aborted') {\n            this.emit('error', error);\n          }\n        }\n      }\n    });\n    try {\n      const promises = [this.ipfs.pubsub.subscribe(this.topic, this.boundHandleQueueMessage, { discover: true, signal: this.abortController.signal })];\n      if (!this.disableSync) {\n        promises.push(this.ipfs.pubsub.subscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { discover: true, signal: this.abortController.signal }));\n        this.waitForPeersThenSendHash();\n      }\n      await Promise.all(promises);\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        throw error;\n      }\n    }\n  }\n\n  async waitForPeersThenSendHash():Promise<void> {\n    if (!this.active) {\n      return;\n    }\n\n\n    try {\n      const peerIds = await this.ipfs.pubsub.peers(this.topic, { timeout: 10000, signal: this.abortController.signal });\n      if (peerIds.length > 0) {\n        this.debouncedIpfsSync();\n      } else {\n        await new Promise((resolve) => setTimeout(resolve, 10000));\n        setImmediate(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    } catch (error) {\n      // IPFS connection is closed or timed out, don't send join\n      if (error.type !== 'aborted' && error.code !== 'ECONNREFUSED' && error.name !== 'TimeoutError') {\n        this.emit('error', error);\n      }\n      if (this.active && error.name === 'TimeoutError') {\n        setImmediate(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    }\n  }\n\n  /**\n   * Publish an IPFS hash of an array containing all of the object's insertions and deletions.\n   * @return {Array<Array<any>>}\n   */\n  async ipfsSync() {\n    if (!this.active) {\n      return;\n    }\n    try {\n      const hash = await this.getIpfsHash();\n      if (!this.active) {\n        return;\n      }\n      if (!this.syncCache.has(hash, true) || this.hasNewPeers) {\n        this.hasNewPeers = false;\n        this.syncCache.set(hash, true);\n        await this.ipfs.pubsub.publish(`${this.topic}:hash`, Buffer.from(hash, 'utf8'), { signal: this.abortController.signal });\n        this.emit('hash', hash);\n      }\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        this.emit('error', error);\n      }\n    }\n  }\n\n  /**\n   * Return a sorted array containing all of the set's insertions and deletions.\n   * @return {[Array<*>, Array<*>]>}\n   */\n  dump() {\n    this.flush();\n    const [insertQueue, deleteQueue] = super.dump();\n    deleteQueue.sort((x, y) => (x[0] > y[0] ? -1 : 1));\n    insertQueue.sort((x, y) => (x[0] > y[0] ? -1 : 1));\n    return [insertQueue, deleteQueue];\n  }\n\n  /**\n   * Stores and returns an IPFS hash of the current insertions and deletions\n   * @return {Promise<string>}\n   */\n  async getIpfsHash():Promise<string> {\n    if (this.ipfsHash) {\n      return this.ipfsHash;\n    }\n    const data = this.dump();\n    const file = await this.ipfs.add(Buffer.from(JSON.stringify(data)), { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal });\n    this.ipfsHash = file.cid.toString();\n    return this.ipfsHash;\n  }\n\n  /**\n   * Current number of IPFS pubsub peers.\n   * @return {number}\n   */\n  async ipfsPeerCount():Promise<number> {\n    const peerIds = await this.ipfs.pubsub.peers(this.topic, { signal: this.abortController.signal });\n    return peerIds.length;\n  }\n\n  /**\n   * Gracefully shutdown\n   * @return {void}\n   */\n  async shutdown(): Promise<void> {\n    this.active = false;\n    // Catch exceptions here as pubsub is sometimes closed by process kill signals.\n    if (this.ipfsId) {\n      try {\n        const unsubscribeAbortController = new AbortController();\n        const timeout = setTimeout(() => {\n          unsubscribeAbortController.abort();\n        }, 5000);\n        const promises = [this.ipfs.pubsub.unsubscribe(this.topic, this.boundHandleQueueMessage, { signal: unsubscribeAbortController.signal })];\n        if (!this.disableSync) {\n          promises.push(this.ipfs.pubsub.unsubscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { signal: unsubscribeAbortController.signal }));\n        }\n        await Promise.all(promises);\n        clearTimeout(timeout);\n      } catch (error) {\n        if (!notSubscribedRegex.test(error.message)) {\n          this.abortController.abort();\n          this.abortController = new AbortController();\n          throw error;\n        }\n      }\n    }\n    this.abortController.abort();\n    this.abortController = new AbortController();\n  }\n\n  handleQueueMessage(message:{from:string, data:Buffer}) {\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.active) {\n      return;\n    }\n    if (this.chunkPubSub) {\n      this.deserializeTransform.write(message.data);\n    } else {\n      try {\n        const queue = JSON.parse(Buffer.from(message.data).toString('utf8'));\n        this.process(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }\n  }\n\n  handleHashMessage(message:{from:string, data:Buffer}) {\n    if (!this.active) {\n      return;\n    }\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.peersCache.has(message.from)) {\n      this.hasNewPeers = true;\n      this.peersCache.set(message.from, true);\n    }\n    const remoteHash = Buffer.from(message.data).toString('utf8');\n    if (this.syncCache.has(remoteHash)) {\n      return;\n    }\n    this.syncCache.set(remoteHash, true);\n    try {\n      this.hashLoadQueue.add(() => this.loadIpfsHash(remoteHash));\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async loadIpfsHash(hash:string) {\n    // $FlowFixMe\n    const stream = Readable.from(this.ipfs.cat(new CID(hash), { timeout: 30000, signal: this.abortController.signal }));\n    const parser = jsonStreamParser();\n    const streamArray = jsonStreamArray();\n    const pipeline = stream.pipe(parser);\n    let arrayDepth = 0;\n    let streamState = 0;\n    let insertions = [];\n    let deletions = [];\n    streamArray.on('data', ({ value }) => {\n      if (streamState === 1) {\n        insertions.push(value);\n      } else if (streamState === 3) {\n        deletions.push(value);\n      }\n      if (insertions.length + deletions.length < 1000) {\n        return;\n      }\n      const i = insertions;\n      const d = deletions;\n      insertions = [];\n      deletions = [];\n      this.process([i, d], true);\n    });\n    try {\n      await new Promise((resolve, reject) => {\n        stream.on('error', (error) => {\n          reject(error);\n        });\n        streamArray.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('end', () => {\n          resolve();\n        });\n        pipeline.on('data', (data) => {\n          const { name } = data;\n          if (name === 'startArray') {\n            arrayDepth += 1;\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n          }\n          if (streamState === 1 || streamState === 3) {\n            streamArray.write(data);\n          }\n          if (name === 'endArray') {\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n            arrayDepth -= 1;\n          }\n        });\n      });\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        this.emit('error', error);\n      }\n      return;\n    }\n    this.process([insertions, deletions]);\n  }\n}\n"],"file":"signed-map.js"}